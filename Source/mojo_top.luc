module mojo_top (

    input clk,              // 50MHz clock

    input rst_n,            // reset button (active low)

    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO

    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)

    output avr_rx,          // AVR RX (FPGA TX)

    output io_led [3][8],   // LEDs on IO Shield

    output io_seg [8],      // 7-segment LEDs on IO Shield

    output io_sel [4],      // Digit select on IO Shield

    input io_dip [3][8],     // DIP switches on IO Shield

    input ip_pin[2]

    

  ) {

  

  sig rst;                  // reset signal

  sig op[8];                // output

  sig auto;

  

  .clk(clk) {

    // The reset conditioner is used to synchronize the reset signal to the FPGA

    // clock. This ensures the entire FPGA comes out of reset at the same time.

    reset_conditioner reset_cond;
    .rst(rst) {
      multi_io_seg seg;   
      .io_dip(io_dip){
          cycle_clock cycle_clock;
      }

      dff test(#INIT(0));
      dff state[4] (#INIT(b0000));

    }

  }


  always {
    auto = io_dip[2][7];

    reset_cond.in = ~rst_n;   // input raw inverted reset signal

    rst = reset_cond.out;     // conditioned reset

    spi_miso = bz;            // not using SPI

    spi_channel = bzzzz;      // not using flags

    avr_rx = bz;              // not using serial port

    io_seg = ~seg.seg; // connect segments to the driver

    io_sel = ~seg.sel; // connect digit select to the driver

    led = c{8b0}; // turn the basic 8 leds off
    

    

    if (auto){

      // hard coded auto behaviour

      if (cycle_clock.out == 1){   // 2s: 000

        seg.values = {h9,h0,h0,h0};   // seg values: "000"

        op = c{b00000000};            // output: 00000000

      } else if ( cycle_clock.out == 2 ){ // 4s: testing for 000

        op = c{b00000000};            // output: 00000000

        if (ip_pin == b00 ) {         // check for correct input: 00
          
          seg.values = {h3,h4,h5,h5}; // PASS
          
        } else {

          seg.values = {h6,h4,h7,h8}; // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 3 ){  // 6s: 001

        seg.values = {h9,h0,h0,h1};    // seg values: "001"

        op = c{b00100001};             // output: 001000001

        

      } else if ( cycle_clock.out == 4 ){  // 8s: testing for 001

        op = c{b00100001};             // output: 001000001

        

        if (ip_pin == b01 ) {          // check for correct input : 01

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

} else if ( cycle_clock.out == 5 ){        // 10s: 010

        seg.values = {h9,h0,h1,h0};    // seg values: "010"

        op = c{b01000001};             // output: b01000001

        

      } else if ( cycle_clock.out == 6 ){  // 12s: testing for 010

        op = c{b01000001};             // output: b01000001

        

        if (ip_pin == b01 ) {          // check for correct input: 01

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 7 ){  // 14s: 011

        seg.values = {h9,h0,h1,h1};    // seg values: "011"

        op = c{b01100010};             // output: b01100010

        

      } else if ( cycle_clock.out == 8 ){  // 16s: check for correct input: 10

        op = c{b01100010};             // output: b01100010

        

        if (ip_pin == b10 ) {          // check for correct input: 01

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 9 ){  // 18s: 100

        seg.values = {h9,h1,h0,h0};    // seg values: "100"

        op = c{b10000001};             // output: b10000001

        

      } else if ( cycle_clock.out == 10 ){ // 20s: testing for 100

        op = c{b10000001};             // output: b10000001

        

        if (ip_pin == b01 ) {          // check for correct input: 01

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 11 ){ // 22s: 101

        seg.values = {h9,h1,h0,h1};    // seg values: "101"

        op = c{b10100010};             // output: b10100010

        

      } else if ( cycle_clock.out == 12 ){ // 24s: testing for 101          

        op = c{b10100010};             // output: b10100010

        

        if (ip_pin == b10 ) {          // check for correct input: 10

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 13 ){ // 26s: 110

        seg.values = {h9,h1,h1,h0};    // seg values: "110"

        op = c{b11000010};             // output: b11000010

        

      } else if ( cycle_clock.out == 14 ){ // 28s: testing for 110

        op = c{b11000010};             // output: b11000010

        

        if (ip_pin == b10 ) {          // check for correct input: 10

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }

                                       // ---------------------

      } else if ( cycle_clock.out == 15 ){ // 30s: 111

        seg.values = {h9,h1,h1,h1};    // seg values: "111"

        op = c{b11100011};             // output: b11100011

        

      } else if ( cycle_clock.out == 16 ){ // 32: testing for 111

        op = c{b11100011};             // output: b11100011

        if (ip_pin == b11 ) {          // check for correct input: 11

          seg.values = {h3,h4,h5,h5};  // PASS

        } else {

          seg.values = {h6,h4,h7,h8};  // FAIL

        }
                                        // ---------------------
      }

    } else {  

      // testing state behaviours

      if (test.q){

        case (state.q){

          b0000:                           // testing for 000

            if (ip_pin == b00 ) {          // check for correct input: 00

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0001:                            // testing for 001

            if (ip_pin == b01 ) {          // check for correct input: 01

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0010:                            // testing for 010

            if (ip_pin == b01 ) {          // check for correct input: 01

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0011:                            // testing for 011

            if (ip_pin == b10 ) {          // check for correct input: 10

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0100:                            // testing for 100

            if (ip_pin == b01 ) {          // check for correct input: 01

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0101:                           // testing for 101

            if (ip_pin == b10 ) {          // check for correct input: 10

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0110:                            // testing for 110

            if (ip_pin == b10 ) {          // check for correct input: 10

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          b0111:                            // testing for 111

            if (ip_pin == b11 ) {          // check for correct input: 11

              seg.values = {h3,h4,h5,h5};  // PASS

            } else {

              seg.values = {h6,h4,h7,h8};  // FAIL

            }

                                           // ---------------------

          default: 

           seg.values = {h6,h4,h7,h8};  // FAIL

        }  

      } else {

        // states behaviours

        case (state.q){

          b0000:                            // 000

            seg.values = {h9,h0,h0,h0};    // seg values: 000

            op = c{b00000000};             // output: 00000000

                                           

          b0001:                            // 001

            seg.values = {h9,h0,h0,h1};    // seg values: 001

            op = c{b00100001};             // output: 00100001

            

          b0010:                            // 010

            seg.values = {h9,h0,h1,h0};    // seg values: 010

            op = c{b01000001};             // output: 01000001

            

          b0011:                            // 011

            seg.values = {h9,h0,h1,h1};    // seg values: 011

            op = c{b01100010};             // output: 01100010

            

          b0100:                            // 100

            seg.values = {h9,h1,h0,h0};    // seg values: 100

            op = c{b10000001};             // output: 10000001

            

          b0101:                            // 101

            seg.values = {h9,h1,h0,h1};    // seg values: 101

            op = c{b10100010};             // output: 10100010

            

          b0110:                            // 110

            seg.values = {h9,h1,h1,h0};    // seg values: 110

            op = c{b11000010};             // output: 11000010

            

          b0111:                            // 111

            seg.values = {h9,h1,h1,h1};    // seg values: 111

            op = c{b11100011};             // output: 11100011

          default: 

           seg.values = {h9,h0,h0,h0};    // seg values: 000

            op = c{b10000000};            // output: 10000000

        }  

      }

    }

    

    

    io_led = {c{auto,7b0}, op, c{6b0,ip_pin}};   // connect the DIP switch[0] to the LED[23]

  }    

}